import numpy
from stl import mesh
import math

# 40 steps
#curve = [[1.035073802949434,0],[1.0286958150698693,0.05197341496253979],[1.0198717917903601,0.10358781703534135],[1.008623869692262,0.15472863710585377],[0.9949789171755253,0.20528253785689107],[0.9789683636297329,0.25513751274212065],[0.9606280757595427,0.3041829708452101],[0.9399982829129403,0.3523098206038862],[0.9171235492113176,0.39941056483955917],[0.8920527869392676,0.44537941828497835],[0.8648393029742112,0.49011245702683565],[0.8355408679490184,0.5335078070939857],[0.8042197962827214,0.5754658768898302],[0.7709430241553413,0.6158896353214494],[0.7357821719569487,0.6546849343421435],[0.698813577770852,0.6917608712441758],[0.660118289162864,0.7270301825182208],[0.6197820020745418,0.760409657631798],[0.5778949380748487,0.7918205579830474],[0.5345516546522018,0.8211890239767846],[0.48985078751947586,0.8484464521113597],[0.44389472874674263,0.8735298245522063],[0.3967892494146635,0.8963819760827788],[0.3486430797548924,0.9169517874208323],[0.29956746279738317,0.9351942991768729],[0.2496756989560857,0.9510707464811409],[0.19908269863676803,0.9645485197374828],[0.1479045580382374,0.9756010614496539],[0.09625817025631958,0.9842077122521016],[0.04426088008620894,0.9903535210909455],[-0.007969812990657982,0.9940290350803153],[-0.06031650291210808,0.9952300841486078],[-0.11266207891470964,0.9939575744457338],[-0.16488988681076705,0.9902173028183066],[-0.21688385772919885,0.9840198026189376],[-0.268528614321815,0.9753802287756976],[-0.3197095658503555,0.9643182874323911],[-0.37031300441951875,0.950858212569798],[-0.42022621482000005,0.9350287888112817],[-0.46933760985594447,0.9168634160985197],[-0.5175369014747168,0.896400208145982],[-0.559358205213924,0.8648900011359794],[-0.5996455769703612,0.8314409717759402],[-0.6383108652727455,0.7961295754639425],[-0.6752693513251724,0.7590357495754974],[-0.7104397493079198,0.7202427160335746],[-0.7437442180303443,0.6798368317737246],[-0.7751083961021742,0.6379074822144186],[-0.8044614702966097,0.5945470096061733],[-0.8317362840271625,0.5498506658636292],[-0.8568694899835547,0.5039165780534801],[-0.8798017480352288,0.45684571399696033],[-0.9004779665390436,0.4087418353622721],[-0.9188475821935816,0.3597114261282054],[-0.9348648705937176,0.3098635853953398],[-0.9484892767269377,0.25930987523696497],[-0.9596857519602452,0.20816411665865348],[-0.9684250818294327,0.1565421297890355],[-0.9746841874895089,0.10456141809973114],[-0.9784463833989412,0.052340800575421245],[-0.9797015750389487,2.1684484487046547e-16],[-0.9784463833989413,-0.05234080057542081],[-0.974684187489509,-0.10456141809973071],[-0.9684250818294328,-0.15654212978903506],[-0.9596857519602453,-0.208164116658653],[-0.948489276726938,-0.2593098752369645],[-0.9348648705937178,-0.3098635853953394],[-0.9188475821935819,-0.359711426128205],[-0.9004779665390439,-0.40874183536227177],[-0.8798017480352293,-0.45684571399696006],[-0.8568694899835555,-0.50391657805348],[-0.8317362840271633,-0.5498506658636291],[-0.8044614702966105,-0.5945470096061732],[-0.775108396102175,-0.6379074822144185],[-0.7437442180303452,-0.6798368317737246],[-0.7104397493079204,-0.7202427160335745],[-0.675269351325173,-0.7590357495754971],[-0.638310865272746,-0.7961295754639421],[-0.5996455769703619,-0.83144097177594],[-0.5593582052139245,-0.864890001135979],[-0.5175369014747174,-0.8964002081459818],[-0.46933760985594514,-0.9168634160985195],[-0.42022621482000067,-0.9350287888112814],[-0.37031300441951936,-0.9508582125697977],[-0.3197095658503561,-0.9643182874323908],[-0.2685286143218157,-0.9753802287756973],[-0.21688385772919946,-0.9840198026189374],[-0.1648898868107677,-0.9902173028183063],[-0.11266207891471028,-0.9939575744457336],[-0.0603165029121087,-0.9952300841486076],[-0.007969812990658612,-0.994029035080315],[0.044260880086208314,-0.9903535210909453],[0.09625817025631896,-0.9842077122521014],[0.1479045580382368,-0.9756010614496538],[0.1990826986367674,-0.9645485197374826],[0.2496756989560851,-0.9510707464811406],[0.29956746279738256,-0.9351942991768728],[0.34864307975489184,-0.9169517874208323],[0.3967892494146629,-0.8963819760827789],[0.4438947287467421,-0.8735298245522064],[0.4898507875194753,-0.8484464521113598],[0.5345516546522011,-0.8211890239767846],[0.577894938074848,-0.7918205579830474],[0.6197820020745413,-0.7604096576317981],[0.6601182891628634,-0.7270301825182208],[0.6988135777708514,-0.6917608712441758],[0.7357821719569481,-0.6546849343421434],[0.7709430241553408,-0.6158896353214494],[0.8042197962827211,-0.5754658768898303],[0.8355408679490182,-0.5335078070939859],[0.8648393029742109,-0.49011245702683576],[0.8920527869392674,-0.44537941828497846],[0.9171235492113173,-0.3994105648395592],[0.9399982829129401,-0.35230982060388627],[0.9606280757595423,-0.30418297084521007],[0.9789683636297325,-0.25513751274212054],[0.9949789171755252,-0.20528253785689102],[1.008623869692262,-0.15472863710585377],[1.0198717917903601,-0.10358781703534135],[1.0286958150698693,-0.05197341496253979]]
# 60 steps
curve = [[1.0500550113422973,0],[1.041534696843142,0.05166408437502894],[1.030686958231449,0.10289002741816768],[1.0175352152919628,0.153573320077604],[1.0021073130638998,0.20361064646616767],[0.9844354026540579,0.25290002562659397],[0.9645558396552133,0.30134094401915174],[0.9425091025708183,0.3488344849836155],[0.9183397313560762,0.3952834614297185],[0.8920962840639799,0.44059255748784165],[0.863831307756001,0.4846684838847978],[0.8336013183856678,0.5274201504921484],[0.8014667833433806,0.5687588579269836],[0.7674920997929298,0.6085985083714129],[0.731745561844751,0.6468558340229882],[0.6942993099901267,0.6834506399010888],[0.6552292570367559,0.7183060562204311],[0.614614985990428,0.7513487943044198],[0.5725396168474077,0.7825093991393746],[0.5290896410020656,0.8117224912387063],[0.484354723818541,0.8389269905397045],[0.4384274777348783,0.8640663156063316],[0.39140320993109173,0.8870885524325522],[0.3433796499752226,0.9079465885665381],[0.29445666386072905,0.9265982100068509],[0.2447359613920107,0.9430061602320025],[0.19432080392770357,0.9571381626755687],[0.14331571905849566,0.9689669098102484],[0.09182622792050181,0.9784700236282611],[0.03995858960117826,0.9856299935962662],[-0.012180434420076776,0.9904340990434353],[-0.06448379452916325,0.9928743233650331],[-0.1168443463840555,0.9929472673738053],[-0.1691550255735369,0.9906540686162162],[-0.22130900710663656,0.9860003325196273],[-0.2731998545166626,0.9789960798964809],[-0.32472166421127596,0.969655713664593],[-0.37576921111525724,0.9579980057269165],[-0.4262381015755143,0.9440461028868374],[-0.47602493888953307,0.9278275485766057],[-0.5250275056711484,0.9093743151935922],[-0.5655097579536082,0.8761634642015763],[-0.6044488566559346,0.8411560754686682],[-0.6417660041767042,0.8044246856493112],[-0.6773856488526223,0.7660450671984241],[-0.7112355481373942,0.7260960542698853],[-0.7432468325485767,0.6846593885004745],[-0.7733540769972805,0.6418195836325994],[-0.8014953849720182,0.5976638059440839],[-0.8276124895348123,0.5522817658771877],[-0.8516508733359205,0.5057656151586344],[-0.8735599079868412,0.4582098431041166],[-0.8932930112638771,0.40971116570127664],[-0.9108078188514195,0.3603684014388336],[-0.926066365772449,0.31028232865257843],[-0.9390352713821308,0.2595555203309128],[-0.9496859208974784,0.20829215378641916],[-0.9579946359656439,0.15659779426211806],[-0.9639428267784921,0.1045791532931771],[-0.9675171187369375,0.052343824367624935],[-0.9687094476370754,2.1656483598842428e-16],[-0.9675171187369375,-0.0523438243676245],[-0.9639428267784922,-0.10457915329317667],[-0.957994635965644,-0.15659779426211762],[-0.9496859208974785,-0.20829215378641872],[-0.9390352713821309,-0.25955552033091234],[-0.9260663657724492,-0.310282328652578],[-0.9108078188514197,-0.36036840143883314],[-0.8932930112638774,-0.4097111657012762],[-0.8735599079868414,-0.4582098431041161],[-0.851650873335921,-0.505765615158634],[-0.8276124895348126,-0.5522817658771872],[-0.8014953849720186,-0.5976638059440834],[-0.7733540769972808,-0.6418195836325988],[-0.743246832548577,-0.6846593885004739],[-0.7112355481373946,-0.7260960542698849],[-0.6773856488526229,-0.7660450671984239],[-0.6417660041767047,-0.804424685649311],[-0.6044488566559352,-0.841156075468668],[-0.5655097579536089,-0.8761634642015762],[-0.5250275056711491,-0.909374315193592],[-0.4760249388895337,-0.9278275485766053],[-0.42623810157551484,-0.9440461028868371],[-0.37576921111525774,-0.9579980057269161],[-0.32472166421127646,-0.9696557136645925],[-0.2731998545166631,-0.9789960798964804],[-0.22130900710663712,-0.986000332519627],[-0.16915502557353745,-0.990654068616216],[-0.11684434638405607,-0.9929472673738051],[-0.06448379452916383,-0.9928743233650329],[-0.012180434420077343,-0.9904340990434353],[0.0399585896011777,-0.9856299935962662],[0.09182622792050125,-0.9784700236282611],[0.1433157190584951,-0.9689669098102484],[0.194320803927703,-0.9571381626755687],[0.24473596139201018,-0.9430061602320027],[0.29445666386072855,-0.926598210006851],[0.343379649975222,-0.9079465885665382],[0.39140320993109123,-0.8870885524325525],[0.43842747773487784,-0.8640663156063317],[0.48435472381854056,-0.8389269905397048],[0.5290896410020652,-0.8117224912387067],[0.5725396168474075,-0.7825093991393749],[0.6146149859904277,-0.7513487943044203],[0.6552292570367557,-0.7183060562204315],[0.6942993099901265,-0.6834506399010892],[0.7317455618447508,-0.6468558340229886],[0.7674920997929295,-0.6085985083714134],[0.8014667833433803,-0.5687588579269839],[0.8336013183856674,-0.5274201504921486],[0.8638313077560007,-0.4846684838847979],[0.8920962840639797,-0.4405925574878418],[0.918339731356076,-0.39528346142971865],[0.9425091025708181,-0.34883448498361563],[0.9645558396552132,-0.30134094401915185],[0.9844354026540578,-0.2529000256265941],[1.0021073130638996,-0.2036106464661677],[1.0175352152919628,-0.15357332007760405],[1.030686958231449,-0.1028900274181677],[1.0415346968431423,-0.05166408437502899]]

def interpolate_value_linearly(x1, x2, progress):
    return x1 * (1.0 - progress) + x2 * progress

def interpolate_point_linearly(p1, p2, progress):
    return [interpolate_value_linearly(p1[0], p2[0], progress), interpolate_value_linearly(p1[1], p2[1], progress)]

def minus(a, b):
    return (a[0] - b[0], a[1] - b[1])
    
def perpendicular(a):
    return (a[1], -a[0])

def length(a):
    return math.sqrt(a[0]*a[0] + a[1]*a[1])
    
def divide(a, x):
    return (a[0]/x, a[1]/x)
    
def normalize(a):
    return divide(a, length(a))

def add(a, b):
    return (a[0] + b[0], a[1] + b[1])
    
def mult(a, x):
    return (a[0]*x, a[1]*x)

def offset_by_distance_and_direction(a, distance, direction):
    return add(a, mult(normalize(direction), distance))


# For line segments a->b->c, generate a vector that splits the angle ABC
def split_angle(a, b, c):
    return add(normalize(minus(b, a)), normalize(minus(b, c)))

def distort_point(x, y, z):
    radius = math.sqrt(x*x + y*y)
    angle = math.atan2(y, x)
    
    
    gear_outside_diameter = 76
    gear_root_diameter = 69
    bend_radius = (gear_root_diameter/2.0 + gear_outside_diameter/2.0)/2.0 # The gear should bend around the middle of the solid bit, so halfway between the root (base of the teeth) and outside
   
    offset_from_bend_radius = radius - bend_radius
    
    continuous_index = angle * len(curve) / (2 * math.pi)
    
    index = math.floor(continuous_index)
    progress = continuous_index - index
    before_curve_from = mult(curve[(index+ len(curve)-1)%len(curve)], bend_radius)
    curve_from = mult(curve[index], bend_radius)
    curve_to = mult(curve[(index+1)%len(curve)], bend_radius)
    after_curve_to = mult(curve[(index+2)%len(curve)], bend_radius)
    
    away_from_curve_from = split_angle(before_curve_from, curve_from, curve_to)
    away_from_curve_to = split_angle(curve_from, curve_to, after_curve_to)
    
    curve_from_scooted = offset_by_distance_and_direction(curve_from, offset_from_bend_radius, away_from_curve_from)
    curve_to_scooted = offset_by_distance_and_direction(curve_to, offset_from_bend_radius, away_from_curve_to)
    
    x,y = interpolate_point_linearly(curve_from_scooted, curve_to_scooted, progress)
    
    
    
    return (x,y,z)
    

m = mesh.Mesh.from_file('ringgeartest.stl')
print(m.points.shape)
#m.rotate([0.0,1.0,0.0], .4)

for point in m.points:
    x0,y0,z0, x1,y1,z1, x2,y2,z2 = point
    x0,y0,z0 = distort_point(x0,y0,z0)
    x1,y1,z1 = distort_point(x1,y1,z1)
    x2,y2,z2 = distort_point(x2,y2,z2)
    for idx, val in enumerate([x0,y0,z0, x1,y1,z1, x2,y2,z2]):
        point[idx] = val
    
    #print(point)

m.save('ringgeartest_distorted.stl')
